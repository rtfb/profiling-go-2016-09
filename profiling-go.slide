Profiling Go Programs
A case study
22 Sep 2016
Tags: go, golang, profiling, go-torch

Vytautas Å altenis
SRE, Uber
vytas@uber.com
http://rtfb.lt/
@rtfb

* Intro: myself

~4yrs a hobbyist Gopher
~5months a professional Gopher

.link http://rtfb.lt

* Intro: Blackfriday

Blackfriday is a markdown processor

- v2 story

.link https://github.com/russross/blackfriday/

* Profiling tools

- go test -bench
- go-torch

.image ./base/torch.svg _ 1000

* Benchmarks

.code -numbers ./esc_test.go /^func Bench/,/^}/

Run the benchmark:

 $ go test -bench='*Esc*'

* A closer look at that flamegraph

Run your code under instrumentation:

 $ go test -run=^$ -bench=BenchmarkReference -benchmem -cpuprofile prof.cpu
 BenchmarkReference-8   	     200	   9654082 ns/op	 1554625 B/op	   18844 allocs/op
 PASS
 ok  	github.com/russross/blackfriday.v2	2.831s

Generate the flamegraph:

 $ PATH=$GOPATH/src/github.com/uber/go-torch/FlameGraph:$PATH go-torch blackfriday.v2.test prof.cpu

.link ./base/torch.svg Flamegraph

* Problem 1: autolink detector

.code -numbers ./base/inline.go /^func maybeAutoLink/,/^}/

* RFC 3986 - Uniform Resource Identifier

  An implementation should accept uppercase letters as equivalent to lowercase
  in scheme names (e.g., allow "HTTP" as well as "http") for the sake of
  robustness but should only produce lowercase scheme names for consistency.

.link https://tools.ietf.org/html/rfc3986#section-3.1

* Let's try a fix

.code ./fix1/inline.go /^func hasPrefixCaseInsensitive/,/^}/

* And see if it helps:

Before:

 BenchmarkReference-8   	     300	   8520734 ns/op	 1544612 B/op	   18817 allocs/op
 PASS
 ok  	github.com/russross/blackfriday.v2	3.161s

After:

 BenchmarkReference-8   	     500	   6988619 ns/op	 1497504 B/op	   11724 allocs/op
 PASS
 ok  	github.com/russross/blackfriday.v2	3.875s

.link ./fix1/torch.svg Flamegraph

* Problem 2: regexp

Offending code:

.code ./base/block.go /^func finalizeCodeBlock/,/^}/

.code ./base/block.go /reTrailingWhitespace.*=/

* Fix 2: don't regexp

Before:

 BenchmarkReference-8   	     500	   6988619 ns/op	 1497504 B/op	   11724 allocs/op
 PASS
 ok  	github.com/russross/blackfriday.v2	3.875s

After:

 BenchmarkReference-8   	     300	   5578976 ns/op	 1478288 B/op	   11282 allocs/op
 PASS
 ok  	github.com/russross/blackfriday.v2	2.152s

.link ./fix2/torch.svg Flamegraph

* Problem 3: producing HTML elt

.code ./base/html.go /^func tag/,/^}/

* The heart of a large fix

.code ./fix3/html.go /^func \(r \*HTMLRenderer\) tag/,/^}/

* And see if it helps:

Before:

 BenchmarkReference-8   	     300	   5578976 ns/op	 1478288 B/op	   11282 allocs/op
 PASS
 ok  	github.com/russross/blackfriday.v2	2.152s

After:

 BenchmarkReference-8   	     500	   5473717 ns/op	 1455225 B/op	    9341 allocs/op
 PASS
 ok  	github.com/russross/blackfriday.v2	3.106s

.link ./fix3/torch.svg Flamegraph

* Recap

- Write the benchmarks! Don't tune the code until you have some
- The tools are really helpful
- Look for wide slabs in go-torch
- Look for unexpected/suspicious calls to runtime functions
- Look for the tall towers of memory allocations

* Further reading/seeing

Dave Cheney - Seven ways to Profile Go Applications:
.link https://www.youtube.com/watch?v=2h_NFBFrciI

Prashant Varanasi - Profiling and Optimizing Go:
.link https://www.youtube.com/watch?v=N3PWzBeLX2M
